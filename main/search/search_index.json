{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#motivation","title":"Motivation","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>arkas</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>arkas</code> to a new version will possibly break any code that was using the old version of <code>arkas</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>arkas</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install arkas\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>arkas</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'arkas[all]'\n</code></pre> <p>This command also installed NumPy and PyTorch. It is also possible to install the optional packages manually or to select the packages to install. In the following example, only NumPy is installed:</p> <pre><code>pip install arkas numpy\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>arkas</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/arkas.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate arkas\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>arkas</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/result/","title":"arkas.result","text":""},{"location":"refs/result/#arkas.result","title":"arkas.result","text":"<p>Contain results.</p>"},{"location":"refs/result/#arkas.result.AccuracyResult","title":"arkas.result.AccuracyResult","text":"<p>               Bases: <code>BaseResult</code></p> <p>Implement the accuracy result.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>ndarray</code> <p>The ground truth target labels. This input must be an array of shape <code>(n_samples,)</code> where the values are in <code>{0, ..., n_classes-1}</code>.</p> required <code>y_pred</code> <code>ndarray</code> <p>The predicted labels. This input must be an array of shape <code>(n_samples,)</code> where the values are in <code>{0, ..., n_classes-1}</code>.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import AccuracyResult\n&gt;&gt;&gt; result = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; result\nAccuracyResult(y_true=(5,), y_pred=(5,))\n&gt;&gt;&gt; result.compute_metrics()\n{'accuracy': 1.0, 'count': 5}\n</code></pre>"},{"location":"refs/result/#arkas.result.BaseResult","title":"arkas.result.BaseResult","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to manage results.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import AccuracyResult\n&gt;&gt;&gt; result = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; result\nAccuracyResult(y_true=(5,), y_pred=(5,))\n&gt;&gt;&gt; result.compute_metrics()\n{'accuracy': 1.0, 'count': 5}\n</code></pre>"},{"location":"refs/result/#arkas.result.BaseResult.compute_metrics","title":"arkas.result.BaseResult.compute_metrics  <code>abstractmethod</code>","text":"<pre><code>compute_metrics(prefix: str = '', suffix: str = '') -&gt; dict\n</code></pre> <p>Return the metrics associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict</code> <p>The metrics.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import AccuracyResult\n&gt;&gt;&gt; result = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; result.compute_metrics()\n{'accuracy': 1.0, 'count': 5}\n</code></pre>"},{"location":"refs/result/#arkas.result.BaseResult.equal","title":"arkas.result.BaseResult.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Indicate if two results are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The other result to compare.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two results are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import AccuracyResult\n&gt;&gt;&gt; res1 = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; res2 = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; res3 = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 0, 0]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; res1.equal(res2)\nTrue\n&gt;&gt;&gt; res1.equal(res3)\nFalse\n</code></pre>"},{"location":"refs/result/#arkas.result.BaseResult.generate_figures","title":"arkas.result.BaseResult.generate_figures  <code>abstractmethod</code>","text":"<pre><code>generate_figures(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict\n</code></pre> <p>Return the figures associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict</code> <p>The figures.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import AccuracyResult\n&gt;&gt;&gt; result = AccuracyResult(\n...     y_true=np.array([1, 0, 0, 1, 1]), y_pred=np.array([1, 0, 0, 1, 1])\n... )\n&gt;&gt;&gt; result.generate_figures()\n{}\n</code></pre>"},{"location":"refs/result/#arkas.result.BinaryClassificationResult","title":"arkas.result.BinaryClassificationResult","text":"<p>               Bases: <code>BaseResult</code></p> <p>Implement the default binary classification result.</p> <p>Parameters:</p> Name Type Description Default <code>y_true</code> <code>ndarray</code> <p>The ground truth target binary labels. This input must be an array of shape <code>(n_samples,)</code> where the values are <code>0</code> or <code>1</code>.</p> required <code>y_pred</code> <code>ndarray</code> <p>The predicted binary labels. This input must be an array of shape <code>(n_samples,)</code> where the values are <code>0</code> or <code>1</code>.</p> required <code>y_score</code> <code>ndarray | None</code> <p>The target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions.</p> <code>None</code> <code>f1_betas</code> <code>Sequence[float]</code> <p>The betas used to compute the F-beta scores.</p> <code>(1)</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from arkas.result import BinaryClassificationResult\n&gt;&gt;&gt; result = BinaryClassificationResult(\n...     y_true=np.array([1, 0, 0, 1, 1]),\n...     y_pred=np.array([1, 0, 0, 1, 1]),\n...     y_score=np.array([2, -1, 0, 3, 1]),\n... )\n&gt;&gt;&gt; result\nBinaryClassificationResult(\n  (y_true): (5,)\n  (y_pred): (5,)\n  (y_score): (5,)\n  (f1_betas): (1,)\n)\n&gt;&gt;&gt; result.compute_metrics()\n{'accuracy': 1.0,\n 'balanced_accuracy': 1.0,\n 'precision': 1.0,\n 'recall': 1.0,\n 'jaccard': 1.0,\n 'count': 5,\n 'count_correct': 5,\n 'count_incorrect': 0,\n 'false_negative_rate': 0.0,\n 'false_negative': 0,\n 'false_positive_rate': 0.0,\n 'false_positive': 0,\n 'true_negative_rate': 1.0,\n 'true_negative': 2,\n 'true_positive_rate': 1.0,\n 'true_positive': 3,\n 'f1': 1.0,\n 'average_precision': 1.0,\n 'roc_auc': 1.0}\n</code></pre>"},{"location":"refs/result/#arkas.result.BinaryClassificationResult.compute_base_metrics","title":"arkas.result.BinaryClassificationResult.compute_base_metrics","text":"<pre><code>compute_base_metrics(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict[str, float]\n</code></pre> <p>Return the base metrics associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>The metrics.</p>"},{"location":"refs/result/#arkas.result.BinaryClassificationResult.compute_confmat_metrics","title":"arkas.result.BinaryClassificationResult.compute_confmat_metrics","text":"<pre><code>compute_confmat_metrics(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict[str, float]\n</code></pre> <p>Return the confusion matrix-based metrics associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>The metrics.</p>"},{"location":"refs/result/#arkas.result.BinaryClassificationResult.compute_fbeta_metrics","title":"arkas.result.BinaryClassificationResult.compute_fbeta_metrics","text":"<pre><code>compute_fbeta_metrics(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict[str, float]\n</code></pre> <p>Return the F-beta metrics associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>The metrics.</p>"},{"location":"refs/result/#arkas.result.BinaryClassificationResult.compute_rank_metrics","title":"arkas.result.BinaryClassificationResult.compute_rank_metrics","text":"<pre><code>compute_rank_metrics(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict[str, float]\n</code></pre> <p>Return the ranking-based metrics associated to the result.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The key prefix in the returned dictionary.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The key suffix in the returned dictionary.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>The metrics.</p>"},{"location":"refs/result/#arkas.result.Result","title":"arkas.result.Result","text":"<p>               Bases: <code>BaseResult</code></p> <p>Implement a simple result.</p> <p>Parameters:</p> Name Type Description Default <code>metrics</code> <code>dict | None</code> <p>The metrics.</p> <code>None</code> <code>figures</code> <code>dict | None</code> <p>The figures.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.result import Result\n&gt;&gt;&gt; result = Result(metrics={\"accuracy\": 1.0, \"count\": 42}, figures={})\n&gt;&gt;&gt; result\nResult(metrics=2, figures=0)\n&gt;&gt;&gt; result.compute_metrics()\n{'accuracy': 1.0, 'count': 42}\n</code></pre>"},{"location":"refs/utils/","title":"arkas.utils","text":""},{"location":"refs/utils/#arkas.utils","title":"arkas.utils","text":"<p>Contain utility functions.</p>"},{"location":"refs/utils/#arkas.utils.factory","title":"arkas.utils.factory","text":"<p>Contain a function to instantiate an object from its configuration.</p>"},{"location":"refs/utils/#arkas.utils.factory.setup_object","title":"arkas.utils.factory.setup_object","text":"<pre><code>setup_object(obj_or_config: T | dict) -&gt; T\n</code></pre> <p>Set up an object from its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>obj_or_config</code> <code>T | dict</code> <p>The object or its configuration.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The instantiated object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.factory import setup_object\n&gt;&gt;&gt; obj = setup_object({\"_target_\": \"collections.deque\", \"iterable\": [1, 2, 1, 3]})\n&gt;&gt;&gt; obj\ndeque([1, 2, 1, 3])\n&gt;&gt;&gt; setup_object(obj)  # Do nothing because the object is already instantiated\ndeque([1, 2, 1, 3])\n</code></pre>"},{"location":"refs/utils/#arkas.utils.figure","title":"arkas.utils.figure","text":"<p>Contain utility functions to manage matplotlib figures.</p>"},{"location":"refs/utils/#arkas.utils.figure.figure2html","title":"arkas.utils.figure.figure2html","text":"<pre><code>figure2html(\n    fig: Figure | None,\n    reactive: bool = True,\n    close_fig: bool = False,\n) -&gt; str\n</code></pre> <p>Convert a matplotlib figure to a string that can be used in a HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure | None</code> <p>The figure to convert.</p> required <code>reactive</code> <code>bool</code> <p>If <code>True</code>, the generated is configured to be reactive to the screen size.</p> <code>True</code> <code>close_fig</code> <code>bool</code> <p>If <code>True</code>, the figure is closed after it is converted to HTML format.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The converted figure to a string.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from matplotlib import pyplot as plt\n&gt;&gt;&gt; from arkas.utils.figure import figure2html\n&gt;&gt;&gt; fig, ax = plt.subplots()\n&gt;&gt;&gt; string = figure2html(fig)\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports","title":"arkas.utils.imports","text":"<p>Implement some utility functions to manage optional dependencies.</p>"},{"location":"refs/utils/#arkas.utils.imports.check_colorlog","title":"arkas.utils.imports.check_colorlog","text":"<pre><code>check_colorlog() -&gt; None\n</code></pre> <p>Check if the <code>colorlog</code> package is installed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if the <code>colorlog</code> package is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import check_colorlog\n&gt;&gt;&gt; check_colorlog()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports.check_markdown","title":"arkas.utils.imports.check_markdown","text":"<pre><code>check_markdown() -&gt; None\n</code></pre> <p>Check if the <code>markdown</code> package is installed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if the <code>markdown</code> package is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import check_markdown\n&gt;&gt;&gt; check_markdown()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports.colorlog_available","title":"arkas.utils.imports.colorlog_available","text":"<pre><code>colorlog_available(\n    fn: Callable[..., Any]\n) -&gt; Callable[..., Any]\n</code></pre> <p>Implement a decorator to execute a function only if <code>colorlog</code> package is installed.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[..., Any]</code> <p>The function to execute.</p> required <p>Returns:</p> Type Description <code>Callable[..., Any]</code> <p>A wrapper around <code>fn</code> if <code>colorlog</code> package is installed, otherwise <code>None</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import colorlog_available\n&gt;&gt;&gt; @colorlog_available\n... def my_function(n: int = 0) -&gt; int:\n...     return 42 + n\n...\n&gt;&gt;&gt; my_function()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports.is_colorlog_available","title":"arkas.utils.imports.is_colorlog_available","text":"<pre><code>is_colorlog_available() -&gt; bool\n</code></pre> <p>Indicate if the <code>colorlog</code> package is installed or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>colorlog</code> is available otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import is_colorlog_available\n&gt;&gt;&gt; is_colorlog_available()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports.is_markdown_available","title":"arkas.utils.imports.is_markdown_available","text":"<pre><code>is_markdown_available() -&gt; bool\n</code></pre> <p>Indicate if the <code>markdown</code> package is installed or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>markdown</code> is available otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import is_markdown_available\n&gt;&gt;&gt; is_markdown_available()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.imports.markdown_available","title":"arkas.utils.imports.markdown_available","text":"<pre><code>markdown_available(\n    fn: Callable[..., Any]\n) -&gt; Callable[..., Any]\n</code></pre> <p>Implement a decorator to execute a function only if <code>markdown</code> package is installed.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[..., Any]</code> <p>The function to execute.</p> required <p>Returns:</p> Type Description <code>Callable[..., Any]</code> <p>A wrapper around <code>fn</code> if <code>markdown</code> package is installed, otherwise <code>None</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.imports import markdown_available\n&gt;&gt;&gt; @markdown_available\n... def my_function(n: int = 0) -&gt; int:\n...     return 42 + n\n...\n&gt;&gt;&gt; my_function()\n</code></pre>"},{"location":"refs/utils/#arkas.utils.text","title":"arkas.utils.text","text":"<p>Contain text utility functions.</p>"},{"location":"refs/utils/#arkas.utils.text.markdown_to_html","title":"arkas.utils.text.markdown_to_html","text":"<pre><code>markdown_to_html(\n    text: str, ignore_error: bool = False\n) -&gt; str\n</code></pre> <p>Convert a markdown text to HTML text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The markdown text to convert.</p> required <code>ignore_error</code> <code>bool</code> <p>If <code>False</code>, an error is raised if <code>markdown</code> is not installed, otherwise the input text is returned.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The converted text if <code>markdown</code> is installed, otherwise the input text.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from arkas.utils.text import markdown_to_html\n&gt;&gt;&gt; out = markdown_to_html(\"- a\\n- b\\n- c\")\n&gt;&gt;&gt; print(out)\n&lt;ul&gt;\n&lt;li&gt;a&lt;/li&gt;\n&lt;li&gt;b&lt;/li&gt;\n&lt;li&gt;c&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"}]}